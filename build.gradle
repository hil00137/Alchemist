plugins {
	id 'java'
	id 'application'
	id 'eclipse'
	id 'jacoco'
	id 'com.github.spotbugs' version '1.6.4'
	id 'pmd'
	id 'checkstyle'
}

repositories {
	jcenter()
}

dependencies {
	testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testCompile 'org.junit.jupiter:junit-jupiter-params:5.3.1'
	testCompile 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
	testImplementation 'org.hamcrest:hamcrest-library:1.3'
	compileOnly 'net.jcip:jcip-annotations:1.0'
	compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.3'
}

mainClassName = 'application.Main'

eclipse.project {
	natures 'org.eclipse.jdt.core.javanature'
	natures 'org.eclipse.buildship.core.gradleprojectnature'
}

test {
	// Enable JUnit 5 (Gradle 4.6+).
	useJUnitPlatform()

	// Always run tests, even when nothing changed.
	dependsOn 'cleanTest'

	// Show test results.
	testLogging {
		events 'skipped', 'failed'
		exceptionFormat = 'full'
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				enabled = true
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.00000
			}
			limit {
				enabled = true
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.00000
			}
			limit {
				enabled = true
				counter = 'COMPLEXITY'
				value = 'COVEREDRATIO'
				minimum = 0.00000
			}
			limit {
				enabled = true
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.00000
			}
			limit {
				enabled = true
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.00000
			}
			limit {
				enabled = true
				counter = 'CLASS'
				value = 'COVEREDRATIO'
				minimum = 0.00000
			}
		}
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
	}
}

check.dependsOn jacocoTestCoverageVerification
check.dependsOn jacocoTestReport

spotbugs {
	toolVersion = '3.1.3'
	ignoreFailures = false
	effort = 'max'
}
tasks.withType(com.github.spotbugs.SpotBugsTask) {
	reports {
		xml.enabled false
		html.enabled true
	}
}

pmd {
	toolVersion = '6.8.0'
	ignoreFailures = false
	ruleSetFiles = files("config/pmd/ruleSet.xml")
	ruleSets = []
}
tasks.withType(Pmd) {
	reports {
		xml.enabled false
		html.enabled true
	}
}

checkstyle {
	toolVersion '8.14'
	ignoreFailures = false
	configFile = file("config/checkstyle/checkstyle.xml")
}
tasks.withType(Checkstyle) {
	reports {
		xml.enabled false
		html.enabled true
	}
}